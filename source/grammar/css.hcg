@SYMBOL || ^= $= *= <= 

@IGNORE θnl θws

##############################################################################################
##############################################################################################
#### CSS
##############################################################################################
##############################################################################################	

	<> CSS → STYLE_SHEET		

	<> STYLE_SHEET → import(*) ( RULE_SET │ AT_RULE )(*)

	<> RULE_SET → COMPLEX_SELECTOR(*,) { declaration_list ;? } ↦c{this.selectors=sym[0]; this.body = sym[2]}

	<> GROUP_RULE_BODY → RULE_SET(*)

	<> AT_RULE → media ;
		│ import ;
		│ keyframes ;
		│ supports ;

##############################################################################################
##############################################################################################
#### @Rules
##############################################################################################
##############################################################################################	

# adapted from https://www.w3.org/TR/css-cascade-4/#at-import

	<> import →  \@ τimport θws(*) ( string │ url ) ( τsupports \( ( supports_condition │ declaration ) \) )? media_query(*,) 

# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes#Formal_syntax

	<> keyframes → \@ τkeyframes keyframes_names { keyframes_blocks(+) }		↦c { this.keyframes = sym[4] }

	<> keyframes_names → τid │ string

	<> keyframes_blocks → keyframe_selector(+,) { declaration_list (;)? }		↦c { this.selectors = sym[0]; this.props = sym[2].props; }

	<> keyframe_selector → τfrom │ τto │ percentage

# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@supports#Formal_syntax

	<> supports → \@ τsupports supports_condition { GROUP_RULE_BODY }

	<> supports_condition → τnot supports_in_parens
		│ supports_in_parens (τand supports_in_parens)(*)
		│ supports_in_parens (τor supports_in_parens)(*)

	<> supports_in_parens → \( supports_condition \)
		│ supports_feature
		│ general_enclosed

	<> supports_feature → supports_feature_fn 
		│ supports_decl 

	<> supports_decl → \( declaration \)
	<> supports_feature_fn →  θselector \( COMPLEX_SELECTOR \)

# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@media#Formal_syntax

	<> media →  \@ τmedia media_query(+,) { GROUP_RULE_BODY }

	<> media_query → media_condition
		│ (τnot │ τonly )? media_type (τand media_condition_without_or)?

	<> media_condition_without_or → media_not
		│ media_and 
		│ media_in_parenths
	
	<> media_condition → media_condition_without_or
		│ media_or

	<> media_not → τnot media_in_parenths
	<> media_and → media_in_parenths (τand media_in_parenths)(+)
	<> media_or → media_in_parenths (τor media_in_parenths)(+)

	<> media_in_parenths → \( media_condition \) 
		│ media_feature
		│ general_enclosed

	<> media_feature → \( ( mf_plain │ mf_boolean │ mf_range ) \)
	<> general_enclosed → θid\( (θany│θws)(*") \)
		│ \( θid (θany│θws)(*") \)

	<> mf_plain → mf_name : mf_value 

	<> mf_range → mf_name ( < │ > │ <= │ >= │ = ) mf_value
		│ mf_value ( < │ > │ <= │ >= │ = ) mf_name
		│ mf_value ( > │ >= ) θid ( > │ >= ) mf_value
		│ mf_value ( < │ <= ) θid ( < │ <= ) mf_value

	<> mf_value → θnum │ dimension │ mf_name │ ratio
	<> mf_boolean → θid
	<> mf_name → θid
	<> media_type → θid

	<> ratio → θnum / θnum
	<> percentage → θnum % 
	<> dimension → θnum ( τpx │ τin │ τrad ) 

	<> url →  τurl ( string )

	<>string → " θany(+") " │ ' θany(+") '

##############################################################################################
#### Modified from https://drafts.csswg.org/selectors-4/#grammar
##############################################################################################

	<> COMPLEX_SELECTOR →  COMPOUND_SELECTOR ( COMBINATOR? COMPOUND_SELECTOR ↦r ^comboSelector)(*)
		↦r{len>1? [sym[0]].concat(sym[1]) : [sym[0]]}

	<> COMPOUND_SELECTOR →  [ TYPE_SELECTOR? SUBCLASS_SELECTOR(*) ( PSEUDO_ELEMENT_SELECTOR PSEUDO_CLASS_SELECTOR(*) )(*) ]
		↦c ^compoundSelector

	<> COMBINATOR →  >  				
		│ + 								
		│ ~ 								
		│ || 								

	<> TYPE_SELECTOR →  WQ_NAME 											↦c ^selector
		│ NS_PREFIX? *														↦c ^selector
	
	<> NS_PREFIX →  (θid │ * )? | 

	<> WQ_NAME →  NS_PREFIX? θid 	

	<> SUBCLASS_SELECTOR →  ID_SELECTOR 
		│ CLASS_SELECTOR 
		│ ATTRIBUTE_SELECTOR 
		│ PSEUDO_CLASS_SELECTOR

	<> ID_SELECTOR →  \# θid  												↦c ^idSelector

	<> CLASS_SELECTOR →  . θid 												↦c ^classSelector

	<> ATTRIBUTE_SELECTOR →  \[ WQ_NAME \] 									↦c ^attribSelector
		│ \[ WQ_NAME ATTR_MATCHER ( θid │ θstr ) ATTR_MODIFIER? \]			↦c ^attribSelector

	<> ATTR_MATCHER → ~=												
		│ ^= 																
		│ $= 																
		│ *=																
		│ = 																

	<> ATTR_MODIFIER →  τi 
		│ τs

	<> PSEUDO_CLASS_SELECTOR →  : θid ( \( COMPLEX_SELECTOR \) )?   		↦c ^pseudoClassSelector

	<> PSEUDO_ELEMENT_SELECTOR →  : PSEUDO_CLASS_SELECTOR 					↦c ^pseudoElementSelector

##############################################################################################
#### Body
##############################################################################################

	<> declaration_list → (declaration)(+;) ;?								↦r { ({props: sym[0], at_rules:[]}) }
		│ AT_RULE 															↦r { ({props: [], at_rules:[sym[0]]}) }
		│ declaration_list AT_RULE 											↦r {  sym[0].at_rules.push(sym[1]), sym[0] }
		│ declaration_list (declaration)(+;) ;?	 							↦r {  sym[0].props.push(...sym[1]), sym[0] }
		

	<> declaration → θid \: declaration_values ( \! τimportant )?			↦r ^parseDeclaration

	<> declaration_values → ( θws │ θany )(+")
		│\( declaration_values \)	 										↦r { sym.join("") }
		│ declaration_values declaration_values 							↦r { sym.join("") }
