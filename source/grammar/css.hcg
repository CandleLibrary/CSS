@SYMBOL || ^= $= *= <= >= . #

@IGNORE θnl θws

@IMPORT ../../node_modules/@candlefw/hydrocarbon/source/grammars/misc/default-productions.hcg as def 

##############################################################################################
##############################################################################################
#### CSS
##############################################################################################
##############################################################################################  

    <> CSS → STYLE_SHEET                                                            

    <> STYLE_SHEET → import(*) ( STYLE_RULE │ AT_RULE )(*)                          
                                                                                    ↦r { {type:env.typ.Stylesheet, imports:$$sym1, nodes:$$sym2, pos} }

    <> STYLE_RULE → COMPLEX_SELECTOR(+,) { declaration_list ;? }                    
                                                                                    ↦r { {type:env.typ.Rule, selectors:$$sym1, props: new Map($$sym3.map(s=>[s.name, s])), pos} }

    <> GROUP_RULE_BODY → STYLE_RULE(*)

    <> AT_RULE → media ;?
        │ import ;?
        │ keyframes ;?
        │ supports ;?

##############################################################################################
##############################################################################################
#### @Rules
##############################################################################################
##############################################################################################  

# adapted from https://www.w3.org/TR/css-cascade-4/#at-import

    <> import →  \@ (ERR g:ws) τimport ( string │ url ) ( τsupports \( ( supports_condition │ declaration ) \) )? media_query(*,) 
                                                                                    ↦r { { import:"@import", type:env.typ.Import, nodes:[$$sym3, $$sym4, ...$$sym5], pos } }

# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes#Formal_syntax

    <> keyframes → \@ (ERR g:ws) τkeyframes keyframes_name { keyframes_blocks(+) }         
                                                                                    ↦r { { keyframes:"@keyframes", type:env.typ.Keyframes, name:$sym3, nodes:[$$sym5], pos } }

    <> keyframes_name → τid │ string

    <> keyframes_blocks → keyframe_selector(+,) { declaration_list ;? }             
                                                                                    ↦r { { type:env.typ.KeyframeBlock, nodes:[
                                                                                            {type:env.type.KeyframeSelectors, nodes:$sym1, pos}, $$sym3
                                                                                        ], pos } }

    <> keyframe_selector → τfrom                                                    ↦r { { type:env.typ.KeyframeSelector, val:$$sym1, pos } }
        │ τto                                                                       ↦r { { type:env.typ.KeyframeSelector, val:$$sym1, pos } }
        │ percentage                                                                ↦r { { type:env.typ.KeyframeSelector, val:$$sym1, pos } }                      
                                                                                    

# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@supports#Formal_syntax

    <> supports → \@ (ERR g:ws) τsupports ( 

            supports_condition                                                      ↦r { { type:env.typ.SupportConditions, nodes:$$sym1, pos } }
        
        ) { GROUP_RULE_BODY }               
                                                                                    ↦r { { type:env.typ.Supports, nodes:[$sym1, $$sym3], pos } }

    <> supports_condition → τnot supports_in_parens                                 ↦r { [{ type:env.typ.Not, nodes:[$sym2], pos }] }
        │ supports_in_parens ( 
            τand supports_in_parens                                                 
                                                                                    ↦r { { type:env.typ.And, nodes:[$sym2], pos } }
            | τor supports_in_parens 
                                                                                    ↦r { { type:env.typ.Or, nodes:[$sym2], pos } }
        )(*) 
                                                                                    ↦r { [$sym1, ...$sym2] }
                                                                                    

    <> supports_in_parens → \( supports_condition \)                                
                                                                                    ↦r { { type:env.typ.Parenthesis, nodes:[$sym2], pos } }
        │ supports_feature
        │ general_enclosed

    <> supports_feature → supports_feature_fn 
        │ supports_decl 

    <> supports_decl → \( declaration \)
    <> supports_feature_fn →  θselector \( COMPLEX_SELECTOR \)
                                                                                    ↦r { { type:env.typ.Function, nodes:[$sym1], pos } }

# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@media#Formal_syntax

    <> media →  \@ (ERR g:ws) τmedia media_queries { GROUP_RULE_BODY }       
                                                                                    ↦r { { media:"@media",  type:env.typ.Media, nodes:[$sym3, ...$sym5], pos } }
    <> media_queries → ( media_query(+,) )                                          
                                                                                    ↦r { { queries:true, type:env.typ.MediaQueries, nodes:$$sym1, pos } }

    <> media_query → media_condition                                                
                                                                                    ↦r { { type:env.typ.Query, nodes:[$sym1], pos } }                       
        │ (τnot │ τonly )? media_type (
                                        τand media_condition_without_or 
                                                                                    ↦r { { type:env.typ.And, nodes:[$sym2], pos } }
                                        )?      
                                                                                    ↦r { { type:env.typ.Query, condition:$sym1, nodes:[$sym2, $sym3], pos } }
    

    <> media_condition → media_condition_without_or
        │ media_or

    <> media_condition_without_or → media_not
        │ media_and 
        │ media_in_parenths

    <> media_not → τnot media_in_parenths                                           ↦r { { type:env.typ.Not, nodes:[$sym2], pos } }

    <> media_and → media_in_parenths (
                                        τand media_in_parenths
                                                                                    ↦r { { type:env.typ.And, nodes:[$sym2], pos } }
                                    )(+)
                                                                                    ↦r { [$sym1, ...$sym2] }

    <> media_or → media_in_parenths (
                                        τor media_in_parenths 
                                                                                    ↦r { { type:env.typ.And, nodes:[$sym2], pos } }
                                    )(+)
                                                                                    ↦r { [$sym1, ...$sym2] }

    <> media_in_parenths → \( media_condition \)                                    ↦r { { type:env.typ.Parenthesis, nodes:[$sym2], pos } }        
        │ media_feature
        │ general_enclosed

    <> media_feature → \( ( mf_plain │ mf_boolean │ mf_range ) \)                   
                                                                                    ↦r { { type:env.typ.MediaFeature, nodes:[$sym2], pos } }
    <> general_enclosed → identifier\( (θany│θws)(*") \)                            

        #│ identifier (θany│θws)(*")                                                 
                                                                                    ↦r { { type:env.typ.MediaFunction, nodes:[$sym3], pos } }

    <> mf_plain → mf_name  \: mf_value                                              ↦r { {type:env.typ.MediaValue, key:$sym1, val:$sym3, pos } }   

    <> mf_range → mf_name ( < │ <= │ > │ >= │ = ) mf_value                          
                                                                                    ↦r { {type:env.typ.MediaEquality, sym:$sym1, left:$sym1, right:$sym3, pos } }  
        │ mf_value ( < │ <= │ > │ >= │ = ) mf_name                                  
                                                                                    ↦r { {type:env.typ.MediaEquality, sym:$sym1, left:$sym1, right:$sym3, pos } }  
        │ mf_value ( > │ >= ) identifier ( > │ >= ) mf_value                        
                                                                                    ↦r { {type:env.typ.MediaRangeDescending, sym:$sym1, max:$sym1, id:$sym3, min:$sym5, pos } } 
        │ mf_value ( < │ <= ) identifier ( < │ <= ) mf_value                        
                                                                                    ↦r { {type:env.typ.MediaRangeAscending, sym:$sym1, min:$sym1, id:$sym3, max:$sym5, pos } } 

    <> mf_value → θnum 
        │ dimension 
        │ mf_name 
        │ ratio

    <> mf_boolean → τtrue                                                           ↦r { { type:env.typ.Boolean, val:true, pos } }
        | τfalse                                                                    ↦r { { type:env.typ.Boolean, val:false, pos } }
    
    <> mf_name → identifier

    <> media_type → identifier                                                      ↦r { { type:env.typ.MediaType, val:$sym1, pos } }                                                                                  

    <> ratio → θnum / θnum                                                          
                                                                                    ↦r { {type:"ratio", num:$sym1, den:$sym3 } }
    
    <> percentage → θnum %                                                          
                                                                                    ↦r { new env.fn.percentage($sym1+$sym2) }
    
    <> dimension → θnum θid                                                         
                                                                                    ↦r { new env.fn.length($sym1+$sym2) }

    <> url →  τurl \( string \)                                                     
                                                                                    ↦r { new env.fn.url($sym3) }                                               

    <>string → " θany(+") " │ ' θany(+") '
                                                                                    ↦r { $sym2 }                                               

##############################################################################################
#### Modified from https://drafts.csswg.org/selectors-4/#grammar
##############################################################################################

    <> COMPLEX_SELECTOR →  COMPOUND_SELECTOR ( 
                                                ( COMBINATOR? COMPOUND_SELECTOR ↦r { $$sym1 ? $sym2.combinator = $sym1 : "", $sym2 } )
                                                                                    
                                            )(*)  
                                                                                    ↦r { {type:env.typ.ComplexSelector, nodes:[$sym1, ...$sym2], pos } } 
    

    <> COMPOUND_SELECTOR → (RED g:ws)  TYPE_SELECTOR? SUBCLASS_SELECTOR(*) ( 
                                                                                PSEUDO_ELEMENT_SELECTOR PSEUDO_CLASS_SELECTOR(*) 
                                                                                    ↦r { {type:env.typ.PseudoSelector, nodes:[$sym1, ...$sym2], pos } } 
                                                                            )(*) 
                                                                                    ↦r { {type:env.typ.CompoundSelector, nodes:[$sym1, ...$sym2, ...$sym3], pos } } 

    <> COMBINATOR →  >                  
        │ +     
        │ ~                                 
        │ \||                               

    <> TYPE_SELECTOR →  WQ_NAME                                                     ↦r { {type:env.typ.TypeSelector, nodes:[$sym1], pos } }
        │ NS_PREFIX? \*                                                             
                                                                                    ↦r { {type:env.typ.TypeSelector, nodes:[{type:env.typ.QualifiedName, ns:$sym1 || "", val:"*", pos }], pos } }
    
    <> NS_PREFIX →  (identifier │ \* )? \| 
                                                                                    ↦r { $$sym1 }

    <> WQ_NAME →  NS_PREFIX? identifier                                             
                                                                                    ↦r { {type:env.typ.QualifiedName, ns:$sym1 || "", val:$sym2, pos } }

    <> SUBCLASS_SELECTOR →  ID_SELECTOR 
        │ CLASS_SELECTOR 
        │ ATTRIBUTE_SELECTOR 
        │ PSEUDO_CLASS_SELECTOR

    <> ID_SELECTOR →  \# (ERR g:ws) identifier                                      ↦r { {type:env.typ.IdSelector, val:$sym2, pos } } 

    <> CLASS_SELECTOR →  \. (ERR g:ws) identifier                                   ↦r { {type:env.typ.ClassSelector, val:$sym2, pos } } 

    <> ATTRIBUTE_SELECTOR →  \[ WQ_NAME \]                                          ↦r { {type:env.typ.AttributeSelector, nodes:[$sym2], pos } } 
        │ \[ WQ_NAME ATTR_MATCHER ( identifier │ \" declaration_values \" ↦r { "\"" + $sym2 + "\"" }   ) ATTR_MODIFIER? \]           
                                        ↦r { {type:env.typ.AttributeSelector, nodes:[$sym2], match_type:$sym3, match_val:$sym4, mod:$sym5, pos } } 

    <> ATTR_MATCHER → ~=                                                
        │ ^=                                                                
        │ $=                                                                
        │ *=                                                                
        │ =                                                                 

    <> ATTR_MODIFIER →  τi 
        │ τs

    <> PSEUDO_CLASS_SELECTOR →  \: (ERR g:ws) identifier ( \(   declaration_values \) ↦r {$sym2} )?        
                                                                                    ↦r { {type:env.typ.PseudoClassSelector, id:$sym2, val:$sym3, pos } } 

    <> PSEUDO_ELEMENT_SELECTOR →  \: (ERR g:ws) PSEUDO_CLASS_SELECTOR               
                                                                                    ↦r { $sym2.type = env.typ.PseudoElementSelector, $sym2 } 

##############################################################################################
#### Body
##############################################################################################

    <> declaration_list → (declaration)(+\;) \;?                                    ↦r { $$sym1 }
        │ AT_RULE                                                                   ↦r { $$sym1 }
        │ declaration_list AT_RULE                                                  ↦r { $$sym1.push($$sym2), $$sym1 }
        │ declaration_list (declaration)(+;) ;?                                     ↦r { $$sym1.push(...$$sym2), $$sym1 }
        

    <> declaration → identifier \: declaration_values ( \! τimportant )?            ↦r ^parseDeclaration

    <> declaration_values → ( θws │ θany │ θid)(+")
        │\( declaration_values \)                                                   ↦r { $$sym1 + $$sym2 + $$sym3 }
        │ declaration_values declaration_values                                     ↦r { $$sym1 + $$sym2 }

    <> identifier → (RED θws)  css_id_symbols                

    <> css_id_symbols →  css_id_symbols θid          ↦r { $sym1 + $sym2 }
        │ css_id_symbols θkeyword                    ↦r { $sym1 + $sym2 }
        │ css_id_symbols \_                          ↦r { $sym1 + $sym2 }
        │ css_id_symbols \-                          ↦r { $sym1 + $sym2 }
        │ css_id_symbols \$                          ↦r { $sym1 + $sym2 }
        │ css_id_symbols θnum                        ↦r { $sym1 + $sym2 }
        │ css_id_symbols θhex                        ↦r { $sym1 + $sym2 }
        │ css_id_symbols θbin                        ↦r { $sym1 + $sym2 }
        │ css_id_symbols θoct                        ↦r { $sym1 + $sym2 }
        │ \_ 
        │ \$ 
        │ θid

