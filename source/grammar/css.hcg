##############################################################################################
##############################################################################################
#### CSS
##############################################################################################
##############################################################################################				

	<> css_RULE → css_SELECTORS css_RULE_BODY

	<> css_SELECTORS → css_SELECTOR 						↦return { [sym[0]] }
		│ css_SELECTORS , css_SELECTOR						↦return { sym[0].push[sym[2]], sym[0]  }

##############################################################################################
#### Modified from https://drafts.csswg.org/selectors-4/#grammar
##############################################################################################

	<> css_SELECTOR → css_SELECTOR_TARGET css_SELECTOR_OPERATION

	<> css_SELECTOR_LIST →  css_COMPLEX_SELECTOR_LIST

	<> css_COMPLEX_SELECTOR_LIST →  css_COMPLEX_SELECTOR
		│ css_COMPLEX_SELECTOR_LIST , css_COMPLEX_SELECTOR

	<> css_COMPLEX_SELECTOR →  css_COMPOUND_SELECTOR combinator css_COMPOUND_SELECTOR

	<> css_COMPOUND_SELECTOR →  [ css_TYPE_SELECTOR? css_SUBCLASS_SELECTOR* [ css_PSEUDO_ELEMENT_SELECTOR css_PSEUDO_CLASS_SELECTOR* ]* ]!

	<> css_SIMPLE_SELECTOR →  css_TYPE_SELECTOR 
		│ css_SUBCLASS_SELECTOR

	<> combinator →  > 
		│ + 
		│ ~ 
		│ ||

	<> css_TYPE_SELECTOR →  css_WQ_NAME 
		│ css_NS_PREFIX? '*'

	<> css_NS_PREFIX →  [ css_IDENT_TOKEN 
		│ '*' ]? '
		│'

	<> css_WQ_NAME →  css_NS_PREFIX? css_IDENT_TOKEN

	<> css_SUBCLASS_SELECTOR →  css_ID_SELECTOR 
		│ css_CLASS_SELECTOR 
		│ css_ATTRIBUTE_SELECTOR 
		│ css_PSEUDO_CLASS_SELECTOR

	<> css_ID_SELECTOR →  css_HASH_TOKEN

	<> css_CLASS_SELECTOR →  . css_IDENT_TOKEN

	<> css_ATTRIBUTE_SELECTOR →  [ css_WQ_NAME ] 
		│ [ css_WQ_NAME css_ATTR_MATCHER [ css_STRING_TOKEN | css_IDENT_TOKEN ] css_ATTR_MODIFIER? ]

	<> css_ATTR_MATCHER → ~
		│ ^ 
		│ $ 
		│ * =

	<> css_ATTR_MODIFIER →  i 
		│ s

	<> css_PSEUDO_CLASS_SELECTOR →  : css_IDENT_TOKEN 
		│ : css_FUNCTION_TOKEN css_ANY_VALUE )

	<> css_PSEUDO_ELEMENT_SELECTOR →  : css_PSEUDO_CLASS_SELECTOR

	<> css_RULE_BODY → { css_RULES } 						↦return { sym[0] }

	<> css_RULES → css_PROP  								↦return { [sym[0]] }
		│ css_RULES ; css_PROP 								↦return { sym[0].push[sym[2]], sym[0]  }

	<> css_PROP → css_PROP_NAME \: css_PROP_BODY  			↦return { {name:sym[0], body:sym[2]} }			

	# Let the css parser handle the actual prop. 
	<> css_PROP_BODY → θstr  								↦return { [sym[0] ] }